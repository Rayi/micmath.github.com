<h3>Overview</h3>

<p>
JSDoc 3 has built-in support for JavaScript code that is written to conform to the <a href="http://wiki.commonjs.org/wiki/Modules/AsynchronousDefinition">CommonJS Asynchronous Module Definition API</a>, implemented by tools such as <a href="http://requirejs.org">RequireJS</a>. Specifically you can add a <code>@defines</code> tag to a function that builds your module and any symbols in that function that are documented members of the <code>exports</code> object will <em>automatically</em> be included in the documentation for that module.
</p>

<h3>Examples</h3>

{{#example}}Documenting a Function That Defines a Module in RequireJS
define(
    "my/shirt",
    
    /**
     * This is just an example module.
     * @defines my/shirt
     */
    function() {
        var exports = {
            /** Try it on. */
            putOn: function(someShirt) {
            }
        };
        
        /** Get busy. */
        exports.rollUpSleeves = function(someShirt) {
        }
        
        return exports;
    }
);
{{/example}}

<p class="notice">
Note: The <code>@defines</code> tag is an <em>alternative</em> to to the <code>@module</code> tag. Although they are both used to document JavaScript modules, only the <code>@defines</code> tag is used in code that has the <code>define</code> function. It would be invalid to use both the <code>@module</code> and the <code>@defines</code> tag in the same file.
</p>

<p class="notice">
Note: While the <code>@module</code> tag applies to an entire file, and thus should only appear once in any file, the <code>@defines</code> tag applies to a specific factory function. Therefore you could have multiple <code>@defines</code> tags in a single file, as long as they were each documenting their own function.
</p>

<h3>See Also</h3>

<ul>
    <li><a href="commonjs-modules.html">Documenting CommonJS modules.</a></li>
    <li><a href="http://requirejs.org/docs/api.html#deffunc">RequireJS Definition Functions</a></li>
</ul>